# Dockerfile for dbpill with integrated PostgreSQL
# PostgreSQL version is specified via build argument

ARG PG_VERSION=17
FROM postgres:${PG_VERSION}-alpine AS postgres-base

# Use Node.js image as the final base
FROM node:22-alpine

# Copy PostgreSQL from the postgres image
COPY --from=postgres-base /usr/local/bin/postgres /usr/local/bin/
COPY --from=postgres-base /usr/local/bin/pg_* /usr/local/bin/
COPY --from=postgres-base /usr/local/bin/initdb /usr/local/bin/
COPY --from=postgres-base /usr/local/bin/psql /usr/local/bin/
COPY --from=postgres-base /usr/local/share/postgresql /usr/local/share/postgresql
COPY --from=postgres-base /usr/local/lib/postgresql /usr/local/lib/postgresql

# Install dependencies required for PostgreSQL and building native modules
# PostgreSQL runtime dependencies:
# - icu-libs: ICU (International Components for Unicode) for text processing and collation
# - libxml2/libxslt: XML processing capabilities for PostgreSQL's XML functions
# - libuuid: UUID generation support
# - lz4-libs/zstd-libs: Compression algorithms for PostgreSQL data storage
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    openssl \
    bash \
    su-exec \
    tzdata \
    icu-libs \
    libxml2 \
    libxslt \
    libuuid \
    lz4-libs \
    zstd-libs

# Create postgres user and group
RUN set -eux; \
    addgroup -g 70 -S postgres; \
    adduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres; \
    mkdir -p /var/lib/postgresql; \
    chown -R postgres:postgres /var/lib/postgresql

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (including tsx for running TypeScript)
RUN npm install

# Copy application files
COPY . .

# Build the client application
RUN npm run build

# Create credentials directory and generate self-signed certificate for proxy
RUN mkdir -p /app/credentials && \
    openssl req -x509 -newkey rsa:4096 -nodes \
    -keyout /app/credentials/proxy.key \
    -out /app/credentials/proxy.crt \
    -days 365 -subj "/CN=dbpill-proxy"

# Create PostgreSQL data directory
RUN mkdir -p /var/lib/postgresql/data && \
    chown -R postgres:postgres /var/lib/postgresql

# Expose web UI port, proxy port, and PostgreSQL port
EXPOSE 3000 5433 5432

# Set default environment variables
ENV NODE_ENV=production
ENV WEB_PORT=3000
ENV PROXY_PORT=5433
ENV POSTGRES_USER=dbpill
ENV POSTGRES_PASSWORD=dbpill
ENV POSTGRES_DB=dbpill
ENV PGDATA=/var/lib/postgresql/data

# Create entrypoint script
COPY docker-entrypoint-integrated.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint-integrated.sh

ENTRYPOINT ["/usr/local/bin/docker-entrypoint-integrated.sh"]
