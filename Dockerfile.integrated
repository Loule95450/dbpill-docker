# Dockerfile for dbpill with integrated PostgreSQL
# PostgreSQL version is specified via build argument

ARG PG_VERSION=17
FROM postgres:${PG_VERSION}-alpine

# Install Node.js runtime and useful tools
RUN apk add --no-cache \
    nodejs-current \
    npm \
    bash \
    tzdata \
    openssl

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies (include dev to keep tsx available at runtime)
RUN npm install

# Copy application files
COPY . .

# Build the client application
RUN npm run build

# Create credentials directory and generate self-signed certificate for proxy
RUN mkdir -p /app/credentials && \
    openssl req -x509 -newkey rsa:4096 -nodes \
    -keyout /app/credentials/proxy.key \
    -out /app/credentials/proxy.crt \
    -days 365 -subj "/CN=dbpill-proxy"

# Rely on official postgres image to manage PGDATA at runtime

# Expose web UI port and proxy port (proxy now defaults to 5432)
EXPOSE 3000 5432 5434

# Set default environment variables
ENV NODE_ENV=production
ENV WEB_PORT=3000
ENV PROXY_PORT=5432
ENV POSTGRES_USER=dbpill
# Do not bake passwords into the image; supply via compose or env at runtime
# ENV POSTGRES_PASSWORD=
ENV POSTGRES_DB=dbpill
# Use a subdirectory to avoid issues when the volume root contains lost+found
ENV PGDATA=/var/lib/postgresql/data/pgdata
# Run integrated PostgreSQL on a non-standard port to free 5432 for the proxy
ENV INTERNAL_POSTGRES_PORT=5434

# Create entrypoint script
COPY docker-entrypoint-integrated.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint-integrated.sh

ENTRYPOINT ["/usr/local/bin/docker-entrypoint-integrated.sh"]
